
/**
 * This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
 *
 * Do not edit this file as changes may cause incorrect behavior and will be lost
 * once the code is regenerated.
 *
 * @generated by codegen project: GenerateModuleJavaSpec.js
 *
 * @nolint
 */

package com.swmansion.audioapi;

import com.facebook.proguard.annotations.DoNotStrip;
import com.facebook.react.bridge.ReactApplicationContext;
import com.facebook.react.bridge.ReactContextBaseJavaModule;
import com.facebook.react.bridge.ReactMethod;
import com.facebook.react.bridge.ReadableArray;
import com.facebook.react.bridge.ReadableMap;
import com.facebook.react.turbomodule.core.interfaces.TurboModule;
import javax.annotation.Nonnull;

public abstract class NativeAudioManagerModuleSpec extends ReactContextBaseJavaModule implements TurboModule {
  public static final String NAME = "AudioManagerModule";

  public NativeAudioManagerModuleSpec(ReactApplicationContext reactContext) {
    super(reactContext);
  }

  @Override
  public @Nonnull String getName() {
    return NAME;
  }

  protected final void emitOnRemotePlay() {
    mEventEmitterCallback.invoke("onRemotePlay");
  }

  protected final void emitOnRemotePause() {
    mEventEmitterCallback.invoke("onRemotePause");
  }

  protected final void emitOnStop() {
    mEventEmitterCallback.invoke("onStop");
  }

  protected final void emitOnTogglePlayPause() {
    mEventEmitterCallback.invoke("onTogglePlayPause");
  }

  protected final void emitOnChangePlaybackRate(double value) {
    mEventEmitterCallback.invoke("onChangePlaybackRate", value);
  }

  protected final void emitOnNextTrack() {
    mEventEmitterCallback.invoke("onNextTrack");
  }

  protected final void emitOnPreviousTrack() {
    mEventEmitterCallback.invoke("onPreviousTrack");
  }

  protected final void emitOnSkipForward(double value) {
    mEventEmitterCallback.invoke("onSkipForward", value);
  }

  protected final void emitOnSkipBackward(double value) {
    mEventEmitterCallback.invoke("onSkipBackward", value);
  }

  protected final void emitOnSeekForward() {
    mEventEmitterCallback.invoke("onSeekForward");
  }

  protected final void emitOnSeekBackward() {
    mEventEmitterCallback.invoke("onSeekBackward");
  }

  protected final void emitOnChangePlaybackPosition(double value) {
    mEventEmitterCallback.invoke("onChangePlaybackPosition", value);
  }

  @ReactMethod
  @DoNotStrip
  public abstract void setLockScreenInfo(ReadableMap info);

  @ReactMethod
  @DoNotStrip
  public abstract void resetLockScreenInfo();

  @ReactMethod
  @DoNotStrip
  public abstract void setSessionOptions(String category, String mode, ReadableArray options);

  @ReactMethod(isBlockingSynchronousMethod = true)
  @DoNotStrip
  public abstract double getDevicePreferredSampleRate();
}
